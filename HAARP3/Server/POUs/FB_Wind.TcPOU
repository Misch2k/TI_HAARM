<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.5">
  <POU Name="FB_Wind" Id="{d1377e74-7c37-4c81-8947-6daed6ae57ec}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Wind
VAR_INPUT
	_auto : BOOL;
	_wind_V : INT;
	_max : REAL;
	_time : INT;
END_VAR
VAR_OUTPUT
	Wind : REAL := 0;
	Trig : BOOL;
END_VAR
VAR
	Count : INT := 0;
	speed : REAL := 0.01;
	Step : BOOL := TRUE;
	valToAdd : REAL;
	
	StartTime : TON;
	StopTime : TON;
	NoWind : TP;
	NoWindFirst : BOOL := TRUE;
	StartT : TIME := T#2S;
	StopT : TIME := T#2S;
	Rand : DRAND;
	Direction : BOOL := TRUE;
	Prog : REAL;
	Height : REAL := 100;
	T_Trig : INT_Trig;
	_do : BOOL;
	_manipulator : INT := 100;
	WindToZero : REAL;
	BWindToZero : BOOL := FALSE;
 END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[StartTime(IN := Direction, PT := StartT);
StopTime(IN := NOT Direction, PT := StopT);
// Triggert _do auf True alle 1 Sek.
T_TRIG(_val := _time, _Q => _do);
// Nach jeder Böhe 30sek pause -> Könnte auch Random generiert werden.
NoWind(IN := count = 0, PT := T#30S);

Trig := _do;

IF NoWind.Q THEN
	_do := FALSE;
	Wind := 0;
END_IF

// Nur Berechnen wenn Automatik und _do true sind.
IF _do AND _auto THEN
	// Direction ist True wenn die Sinuskurve hoch gehen soll.
	IF Direction THEN
		
		// Input für SIN Funktion berechnen für eine schöne Sinuskurve
		Prog := ( TIME_TO_REAL(StartTime.ET) / TIME_TO_REAL(StartT) ) * 90 ;
		// Wenn die Kurve das Ende erreicht hat, direction umschalten und Zufallszeit berechnen.
		IF StartTime.Q THEN
			Direction := FALSE;
			Rand();
			StopT := LREAL_TO_TIME(Rand.Num * 10000);
			count := count + 1;
		END_IF
	ELSE
		// Wenn die Kurve runter gehen soll.
		// count = 7 -> Wind muss bis auf 0 runter gehen.
		IF count = 7 THEN
			WindToZero := Wind;
			BWindToZero := TRUE;
		END_IF
		
		// Input für SIN Funktion für eine schöne Sinuskurve
		Prog := 90 - ( TIME_TO_REAL(StopTime.ET) / TIME_TO_REAL(StopT) ) * 90;
		
		// WWenn die Kurve das Ende erreicht hat, Direction umschalten und Zufallszeit berechnen.
		IF StopTime.Q THEN
				Direction := TRUE;
				Rand();
				StartT := LREAL_TO_TIME(Rand.Num * 10000);
				Step := NOT STEP;
				IF count = 7 THEN
					count := 0;
					BWindToZero := FALSE;
				ELSE
					count := count + 1;
				END_IF
			END_IF
	END_IF	

	IF count = 7 AND BWindToZero THEN
		Wind := WindToZero * LREAL_TO_REAL(SIN(DEG_TO_RAD(Prog)));
	ELSE
		valToAdd := LREAL_TO_REAL(SIN(DEG_TO_RAD(Prog)) * (TIME_TO_REAL(StartT) / _manipulator) ) ;
			
		// Neuen Wind berechnen. Bei annäherung an Maximum oder Minimum Wert änderung verkleinern.
		// Somit wird nie Das Maximum oder Minimum überschritten.
		IF STEP THEN
			valToAdd := valToAdd * ((_max - Wind) / _max);
			Wind := WIND + valToAdd;
		ELSE
			valToAdd := valToAdd * (Wind / _max);
			Wind := WIND - valToAdd;
		END_IF
	END_IF
END_IF

// Wenn Wind Automatik ausgeschalten ist, Slider von Visu direkt als Wind verwenden.
IF NOT _auto THEN
	Wind := _wind_V;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>